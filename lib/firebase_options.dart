// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:looping_diary/core/config/environment_config.dart';
import 'package:looping_diary/secrets/keys.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    // ignore: missing_enum_constant_in_switch
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return _setup();
      case TargetPlatform.iOS:
        return _setup();
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
    }

    throw UnsupportedError('DefaultFirebaseOptions are not supported for this platform.');
  }

  FirebaseOptions _setup() {
    final EnvironmentSuffix env = EnvironmentConfig.getEnumFromString!;

    return FirebaseOptions(
      apiKey: Keys.getApiKey(env),
      appId: Keys.getAppId(env),
      projectId: Keys.getProjectId(env),
      messagingSenderId: Keys.getMessagingSenderId(env),
      storageBucket: Keys.getStorageBucket(env),
      iosClientId: Keys.getIOSClientId(env),
      iosBundleId: Keys.getIOSBundleId(env),
    );
  }
}
